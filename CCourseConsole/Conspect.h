#pragma once

//if(_CrtDumpMemoryLeaks()) - проверка на утечку пам€ти 

//у любого класса есть 4 функциональности по умолчанию:  конструктор , деструктор , оператор присваивани€ , конструктор копировани€

// . - оператор доступа 

// инкапсул€ци€ - закрытие полей от общего доступа класса

// конструктор всегда вызываетс€ при выделении пам€ти под объект
// деструктор всегда вызываетс€ при возвращении пам€ти выделенной под объект

// члены класса в инициализаторе инициализируютьс€ в пор€дке их объ€влени€

///композици€
//
//осведомленность обьекты не завис€т друг от друга
//агрегирование обьекты создаютьс€ один в другом
//

///друзь€
//
//дружественность не транзитивна
//

//в теле класса можно обращатс€ к private пол€м других объектов этого же класса

// A a;
// A b(a); - €вный синтаксис
// A b = a; - не €вный синтаксис

//нельз€ перегружать:	.   .*	?:	  #		##	sizeof
//перегрузка не подхватываетс€ к указател€м
//операторы () [] об€заны быть членами классов
//нельз€ перегружать оператор дл€ встроеных типов

///_5_
//Ўаблонные функции и классы
//
//компил€тор определ€ет тип шаблона по факту вызова
//не шаблонна€ функци€ имеет приоритетность над шаблонной , если она еЄ перегружает
//Sum <int>(...)    <> - вызываетс€ только шаблонна€ функци€  <int> - аргументы привод€тс€ к int 
//
//auto - определ€ет возвращающий тип
//decltype - возвращающий тип будет тот который был старше на входе
//


///указатели на функции 
//
//

///
//объ€вление статических полей состоит из двух частей
//у статической функции нет this
//статитечка€ функци€ класса может обращатс€ только к статическим пол€м класса
//

///
//mutable - нужно чтобы мен€ть константные объекты
//
//